name: test

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

env:
  ENABLE_CODE_COVERAGE: true

jobs:
  unit:
    name: unit tests
    if: ${{ !github.event.act }}
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      id: cache
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Setup node 16
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Install peer dependencies (to be cached by the remaining jobs)
      # in order to lint all files peerDependencies must be installed
      # if: steps.cache.outputs.cache-hit != 'true'
      run: npm install cheerio@1.0.0-rc.10 jsdom@16.6.0 puppeteer@10.1.0 playwright-core@1.13.1 playwright-chromium@1.13.1 knex@1.0.5 @vscode/sqlite3@5.0.8 mysql@2.18.1 pg@8.7.3

    - name: Lint check
      run: npm run lint

    - name: Non-storage unit tests
      run: npx nyc mocha --config test/.mocharc.js \"test/unit/**/*.ts\" --exclude test/unit/storage/**/* 

    - name: Coveralls
      if: ${{ env.ENABLE_CODE_COVERAGE == 'true' && !github.event.act }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: non_storage_unit_tests
        parallel: true

  acceptance:
    name: ${{ matrix.client }} - ${{ matrix.storage_label }} - ${{ matrix.concurrency }}
    if: ${{ !github.event.act }}
    runs-on: ubuntu-18.04
    needs: unit

    strategy:
      fail-fast: false
      matrix:
        client: [cheerio, jsdom, puppeteer_chromium, playwright_chromium]
        storage: [sqlite3, mysql, pg]
        concurrency: [sequential]
        include:
          - client: cheerio
            storage: sqlite3
            storage_label: sqlite
            concurrency: parallel
            client_deps: cheerio@1.0.0-rc.10
            storage_deps: knex@1.0.5 @vscode/sqlite3@5.0.8
          - client: jsdom
            storage: sqlite3
            storage_label: sqlite
            concurrency: parallel
            client_deps: jsdom@16.6.0
            storage_deps: knex@1.0.5 @vscode/sqlite3@5.0.8
          - client: cheerio
            client_deps: cheerio@1.0.0-rc.10
          - client: jsdom
            client_deps: jsdom@16.6.0
          - client: puppeteer_chromium
            client_deps: puppeteer@10.1.0
          - client: playwright_chromium
            client_deps: playwright-core@1.13.1 playwright-chromium@1.13.1
          - storage: sqlite3
            storage_label: sqlite
            storage_deps: knex@1.0.5 @vscode/sqlite3@5.0.8
            docker_file: 
          - storage: mysql
            storage_label: mysql
            storage_deps: knex@1.0.5 mysql@2.18.1
            docker_file: ./test/config/storage/mysql/mysql.yml
          - storage: pg
            storage_label: postgresql
            storage_deps: knex@1.0.5 pg@8.7.3
            docker_file: ./test/config/storage/pg/pg.yml

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      if: ${{ !github.event.act }}
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Docker ${{ matrix.storage_label }} up
      if: ${{ matrix.docker_file }}
      run: /bin/sh -c 'docker_file="${{ matrix.docker_file }}"; if [ $docker_file ]; then docker-compose -f ${{ matrix.docker_file }} up -d; else echo "ignored, no docker file"; fi'
    
    - name: Setup node 16
      if: ${{ !github.event.act }}
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      if: ${{ !github.event.act }}
      run: npm ci

    - name: Install storage peer dependencies for ${{ matrix.storage_label }}
      if: ${{ !github.event.act }}
      run: npm install ${{ matrix.storage_deps }} --save

    - name: Install client peer dependencies for ${{ matrix.client }}
      if: ${{ !github.event.act }}
      run: npm install ${{ matrix.client_deps }} --save

    - name: ${{ matrix.storage_label }} unit tests
      # run storage unit tests once for each storage type, link unit tests to puppeteer_chromium client
      if: ${{ matrix.client == 'puppeteer_chromium' && !github.event.act }}
      run: npx nyc mocha --config test/.mocharc.js \"test/unit/storage/${{ matrix.storage }}-unit-suite.ts\"

    - name: Coveralls for unit tests
      # run storage unit tests once for each storage type, link unit tests to puppeteer_chromium client
      if: ${{ env.ENABLE_CODE_COVERAGE == 'true' && matrix.client == 'puppeteer_chromium' && !github.event.act }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: unit - ${{ matrix.storage_label }}
        parallel: true

    - name: Acceptance tests - ${{ matrix.client }} - ${{ matrix.storage_label }} - ${{ matrix.concurrency }}
      run: | 
        npx nyc --exclude=**/BrowserFetchPlugin.ts --exclude=**/dom-utils.ts mocha --config test/.mocharc.js test/acceptance/${{ matrix.client }}.ts --grep '${{ matrix.storage }} - concurrency: ${{ matrix.concurrency }}'

    - name: Coveralls for acceptance tests
      if: ${{ env.ENABLE_CODE_COVERAGE == 'true' && !github.event.act }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: acceptance - ${{ matrix.storage_label }} - ${{ matrix.client }} - ${{ matrix.concurrency }}
        parallel: true

    - name: Docker ${{ matrix.storage_label }} down
      if: ${{ matrix.docker_file }}
      run: /bin/sh -c 'docker_file="${{ matrix.docker_file }}"; if [ $docker_file ]; then docker-compose -f ${{ matrix.docker_file }} down; else echo "ignored, no docker file"; fi'
   
  cli:
    name: cli tests
    if: ${{ !github.event.act }}
    runs-on: ubuntu-18.04
    needs: unit

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Setup node 16
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: npm ci

    - name: Install peer dependencies so that the project can be built
      run: npm install cheerio@1.0.0-rc.10 jsdom@16.6.0 puppeteer@10.1.0 playwright-core@1.13.1 playwright-chromium@1.13.1 knex@1.0.5 @vscode/sqlite3@5.0.8 mysql@2.18.1 pg@8.7.3

    - name: Build project as cli uses dist files
      run: npm run build

    - name: Make cli executable
      run: chmod +x bin/gsfscrape

    - name: cli tests
      run: npx nyc mocha --config test/.mocharc.js \"test/acceptance/cli/test-cli.ts\"

  docker:
    name: docker tests
    if: ${{ !github.event.act }}
    runs-on: ubuntu-20.04
    needs: acceptance

    steps:
    - uses: actions/checkout@v2
      if: ${{ !github.event.act }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache node modules
      if: ${{ !github.event.act }}
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Setup node 16
      if: ${{ !github.event.act }}
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      if: ${{ !github.event.act }}
      run: npm ci

    - name: Docker tests using branch name from push requests
      if: github.event_name != 'pull_request'
      run: BRANCH=${GITHUB_REF#refs/heads/} npx mocha --config test/.mocharc.js \"test/acceptance/docker/test-docker.ts\"

    - name: Docker tests using branch name from pull requests
      if: github.event_name == 'pull_request'
      run: BRANCH=${{ github.head_ref }} npx mocha --config test/.mocharc.js \"test/acceptance/docker/test-docker.ts\"

  coverage:
    name: coverage
    runs-on: ubuntu-18.04
    needs: [cli, acceptance]
    
    steps:
    - name: Coveralls
      if: ${{ env.ENABLE_CODE_COVERAGE == 'true' && !github.event.act }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
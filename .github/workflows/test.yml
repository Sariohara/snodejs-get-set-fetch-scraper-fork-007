name: test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit:
    name: unit tests
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Setup node 14
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Install dependencies
      run: npm ci

    - name: Install peer dependencies
      run: npm install cheerio jsdom puppeteer playwright-core playwright-chromium knex sqlite3 mysql pg

    - name: Lint check
      run: npm run lint

    - name: Non-storage unit tests
      run: npx nyc mocha --config test/.mocharc.js \"test/unit/**/*.ts\" --exclude test/unit/storage/**/* 

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: non_storage_unit_tests
        parallel: true

  acceptance:
    name: ${{ matrix.client }} - ${{ matrix.storage }} - ${{ matrix.concurrency }}
    runs-on: ubuntu-18.04
    needs: unit

    strategy:
      fail-fast: false
      matrix:
        client: [cheerio, jsdom, puppeteer_chromium, playwright_chromium]
        storage: [sqlite, mysql, postgresql]
        concurrency: [sequential]
        include:
          - client: cheerio
            storage: sqlite
            concurrency: parallel
            client_deps: cheerio
            storage_deps: knex sqlite3
          - client: jsdom
            storage: sqlite
            concurrency: parallel
            client_deps: jsdom
            storage_deps: knex sqlite3
          - client: cheerio
            client_deps: cheerio
          - client: jsdom
            client_deps: jsdom
          - client: puppeteer_chromium
            client_deps: puppeteer
          - client: playwright_chromium
            client_deps: playwright-core playwright-chromium
          - storage: sqlite
            storage_deps: knex sqlite3
            docker_file: 
          - storage: mysql
            docker_file: ./test/config/storage/mysql/mysql.yml
            storage_deps: knex mysql
          - storage: postgresql
            docker_file: ./test/config/storage/pg/pg.yml 
            storage_deps: knex pg

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Docker ${{ matrix.storage }} up
      if: ${{ matrix.docker_file }}
      run: /bin/sh -c 'docker_file="${{ matrix.docker_file }}"; if [ $docker_file ]; then docker-compose -f ${{ matrix.docker_file }} up -d; else echo "ignored, no docker file"; fi'

    - name: Setup node 14
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Install dependencies
      run: npm ci

    - name: Install storage peer dependencies for ${{ matrix.storage }}
      run: npm install ${{ matrix.storage_deps }} --save

    - name: Install client peer dependencies for ${{ matrix.client }}
      run: npm install ${{ matrix.client_deps }} --save

    - name: ${{ matrix.storage }} unit tests
      # run storage unit tests once for each storage type, link unit tests to puppeteer_chromium client
      if: ${{ matrix.client == 'puppeteer_chromium' }}
      run: npx nyc mocha --config test/.mocharc.js \"test/unit/storage/${{ matrix.storage }}-unit-suite.ts\"

    - name: Coveralls for unit tests
      if: ${{ matrix.run_storage_unit_tests }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: unit - ${{ matrix.storage }}
        parallel: true

    - name: Acceptance tests - ${{ matrix.client }} - ${{ matrix.storage }} - ${{ matrix.concurrency }}
      run: | 
        npx nyc --exclude=**/BrowserFetchPlugin.ts --exclude=**/utils.ts mocha --config test/.mocharc.js test/acceptance/${{ matrix.client }}.ts --grep '${{ matrix.storage }} - concurrency: ${{ matrix.concurrency }}'

    - name: Coveralls for acceptance tests
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: acceptance - ${{ matrix.storage }} - ${{ matrix.client }} - ${{ matrix.concurrency }}
        parallel: true

    - name: Docker ${{ matrix.storage }} down
      if: ${{ matrix.docker_file }}
      run: /bin/sh -c 'docker_file="${{ matrix.docker_file }}"; if [ $docker_file ]; then docker-compose -f ${{ matrix.docker_file }} down; else echo "ignored, no docker file"; fi'
   
  coverage:
    name: coverage
    runs-on: ubuntu-18.04
    needs: [acceptance]
    
    steps:
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
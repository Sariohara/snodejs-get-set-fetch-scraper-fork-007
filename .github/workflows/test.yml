name: test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit:
    name: unit tests
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # can't cache based on package-lock.json as it doesn't contain the peerDependencies we want to cache
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}

    - name: Setup node 14
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Install dependencies
      run: npm ci

    - name: Install peer dependencies
      run: npm install cheerio jsdom puppeteer@5.5.0 playwright-core playwright-chromium knex sqlite3@4 mysql pg

    - name: Lint check
      run: npm run lint

    - name: Non-storage unit tests
      run: npx nyc mocha --config test/.mocharc.js \"test/unit/**/*.ts\" --exclude test/unit/storage/**/* 

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: non_storage_unit_tests
        parallel: true

  acceptance:
    name: ${{ matrix.client }} - ${{ matrix.storage }} - ${{ matrix.concurrency }}
    runs-on: ubuntu-18.04
    needs: unit

    strategy:
      fail-fast: false
      matrix:
        client: [cheerio, jsdom, puppeteer_chromium, playwright_chromium]
        storage: [sqlite, mysql, postgresql]
        concurrency: [sequential]
        include:
          - client: cheerio
            concurrency: parallel
            client_deps: cheerio
          - client: jsdom
            concurrency: parallel
            client_deps: jsdom
          - client: puppeteer_chromium
            client_deps: puppeteer
          - client: playwright_chromium
            client_deps: playwright-core playwright-chromium
          - storage: sqlite
            storage_deps: knex
            docker_file: 
          - storage: mysql
            docker_file: ./test/config/storage/mysql/mysql.yml
            storage_deps: knex mysql
          - storage: pg
            docker_file: ./test/config/storage/pg/pg.yml 
            storage_deps: knex pg

    steps:
    - name: Acceptance Tests
      uses: ./.github/actions/acceptance
      with:
        storage: ${{ matrix.storage }}
        storage_deps: ${{ matrix.storage_deps }}
        client: ${{ matrix.client }}
        client_deps: ${{ matrix.client_deps }}
        concurrency: ${{ matrix.concurrency }}
        docker_file: ${{ matrix.docker_file }}
        coveralls_token: ${{ secrets.GITHUB_TOKEN }} 
        # run storage unit tests once for each storage type, link unit tests to puppeteer_chromium client
        run_storage_unit_tests: ${{ matrix.puppeteer_chromium == 'puppeteer_chromium' }}
   
  coverage:
    name: coverage
    runs-on: ubuntu-18.04
    needs: [acceptance]
    
    steps:
    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true